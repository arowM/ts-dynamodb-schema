/**
 * Type safe schema for DynamoDB.
 * @module
 */
import * as marshaller from "@aws/dynamodb-data-marshaller";
// import {unmarshallItem, marshallValue} from "@aws/dynamodb-data-marshaller";
/**
 * Schema
 */
export class Schema {
}
class BinarySchema extends Schema {
    constructor() {
        super();
    }
    serializeItem() {
        return { type: "Binary" };
    }
}
/**
 * Binary Schema
 */
export const buffer = () => new BinarySchema();
class BooleanSchema extends Schema {
    constructor() {
        super();
    }
    serializeItem() {
        return { type: "Boolean" };
    }
}
/**
 * Boolean Schema
 */
export const boolean = () => new BooleanSchema();
class DateSchema extends Schema {
    constructor() {
        super();
    }
    serializeItem() {
        return { type: "Date" };
    }
}
/**
 * Date Schema
 */
export const date = () => new DateSchema();
class NumberSchema extends Schema {
    constructor() {
        super();
    }
    serializeItem() {
        return { type: "Number" };
    }
}
/**
 * Number Schema.
 */
export const number = () => new NumberSchema();
class StringSchema extends Schema {
    constructor() {
        super();
    }
    serializeItem() {
        return { type: "String" };
    }
}
/**
 * String Schema.
 */
export const string = () => new StringSchema();
class ArraySchema extends Schema {
    constructor(schema) {
        super();
        this._schema = schema;
    }
    serializeItem() {
        return {
            type: "List",
            memberType: this._schema.serializeItem(),
        };
    }
}
/**
 * Array Schema
 */
export function array(item) {
    return new ArraySchema(item);
}
class MapSchema extends Schema {
    constructor(schema) {
        super();
        this._schema = schema;
    }
    serializeItem() {
        return {
            type: "Map",
            memberType: this._schema.serializeItem(),
        };
    }
}
/**
 * Map Schema
 */
export function map(item) {
    return new MapSchema(item);
}
class SetSchema extends Schema {
    constructor(schema) {
        super();
        this._schema = schema;
    }
    memberType() {
        if (this._schema instanceof BinarySchema) {
            return "Binary";
        }
        if (this._schema instanceof NumberSchema) {
            return "Number";
        }
        if (this._schema instanceof StringSchema) {
            return "String";
        }
        throw new Error("Invalid Set");
    }
    serializeItem() {
        return {
            type: "Set",
            memberType: this.memberType(),
        };
    }
}
/**
 * Set Schema
 */
export function set(item) {
    return new SetSchema(item);
}
class NullableSchema extends Schema {
    constructor(schema) {
        super();
        this._schema = schema;
    }
    marshall(input) {
        if (input === null) {
            return {
                NULL: true,
            };
        }
        const serialized = marshaller.marshallValue(this._schema.serializeItem(), input);
        if (serialized === void 0) {
            throw new Error("Failed to marshallValue");
        }
        return serialized;
    }
    unmarshall(input) {
        if ("NULL" in input) {
            return null;
        }
        const deserialized = marshaller.unmarshallItem({ foo: this._schema.serializeItem() }, { foo: input });
        return deserialized.foo;
    }
    serializeItem() {
        return {
            type: "Custom",
            marshall: this.marshall.bind(this),
            unmarshall: this.unmarshall.bind(this),
        };
    }
}
/**
 * Nullable Schema
 */
export function nullable(item) {
    return new NullableSchema(item);
}
/**
 * Object Schema
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export class ObjectSchema extends Schema {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    constructor(schema) {
        super();
        this._schema = schema;
    }
    /** Asign required field.
     *
     * Note that `Schema` cannot handle objects with any optional fields.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    field(name, schema) {
        return new ObjectSchema([
            ...this._schema,
            [name, schema],
        ]);
    }
    serializeValue() {
        return Object.fromEntries(this._schema.map(([key, schema]) => [key, schema.serializeItem()]));
    }
    serializeItem() {
        return {
            type: "Document",
            members: this.serializeValue(),
        };
    }
    marshallItem(input) {
        return marshaller.marshallItem(this.serializeValue(), input);
    }
    unmarshallItem(input) {
        const ret = marshaller.unmarshallItem(this.serializeValue(), input);
        // It seems that marshaller.unmarshallItem has a bug...
        this._schema.forEach(([key]) => {
            if (!(key in ret)) {
                throw new Error('Required Attribute "' + key.toString() + '" is not found.');
            }
        });
        return ret;
    }
}
// eslint-disable-next-line @typescript-eslint/ban-types
ObjectSchema.entry = new ObjectSchema([]);
//# sourceMappingURL=data:application/json;base64,